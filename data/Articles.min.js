var Articles = function() {
  /**
   * @return {undefined}
   */
  var valueAccessor = function() {
  };
  /**
   * @return {undefined}
   */
  var postLink = function() {
    $(".lists-types a").on("click", function() {
      $(".lists-types a").removeClass("selected").addClass("button-white").removeClass("button-gray");
      $(this).addClass("selected").removeClass("button-white").addClass("button-gray");
      hide();
    });
    $(".moreentry").off("click").on("click", function() {
      var topic = $(this);
      var $next = $(".moreentrywidget");
      if ($next.hasClass("show")) {
        $next.removeClass("show");
        topic.find("i").attr("class", "fa fa-caret-down");
      } else {
        $next.addClass("show");
        topic.find("i").attr("class", "fa fa-caret-up");
      }
    });
    $(".moredetail .trigger").off("click").on("click", function() {
      if ($(this).hasClass("active")) {
        if ($(this).hasClass("active")) {
          $(this).parent().find(".detailhide").slideUp("fast");
          $(this).removeClass("active");
          $(this).find(".up").hide();
          $(this).find(".down").show();
        }
      } else {
        $(this).parent().find(".detailhide").slideDown("fast");
        $(this).addClass("active");
        $(this).find(".up").show();
        $(this).find(".down").hide();
      }
    });
    $(".up-down-trigger").on("click", function(dataAndEvents) {
      var $target = $(this);
      var header = $target.parents(".entry");
      if ($target.hasClass("up-entry")) {
        var h3 = header.prev();
        header.insertBefore(h3);
      } else {
        if ($target.hasClass("down-entry")) {
          var $this = header.next();
          header.insertAfter($this);
        }
      }
      hide();
    });
    $(".getassignres").on("click", function() {
      update();
    });
    $(".clickanswertype").on("click", function() {
      var imageData = $(this).attr("data-style");
      $(this).parents(".questionmore").find("a").removeClass("button-orange").addClass("button-white").removeAttr("data-curtype");
      $(this).removeClass("button-white").addClass("button-orange").attr("data-curtype", "on");
      $(this).parents(".questionmore").find(".answers").attr("class", "answers " + imageData);
    });
    $(".delete-entry").on("click", function(dataAndEvents) {
      var $e = $(this);
      swal({
        title : lang.lang_1,
        text : lang.lang_2,
        type : "warning",
        showCancelButton : true,
        confirmButtonColor : "#DD6B55",
        confirmButtonText : lang.lang_3,
        cancelButtonText : lang.lang_4
      }).then(function() {
        if ("entry" == $e.attr("data-block")) {
          $e.parents(".entry").first().remove();
        } else {
          $e.parents(".answer").first().remove();
        }
        hide();
      });
    });
    $(".thumbactions a.deleteimage").on("click", function(dataAndEvents) {
      var ele = $(this);
      var yes = ($(this).attr("data-action"), $(this).attr("data-target"));
      swal({
        title : lang.lang_1,
        type : "warning",
        showCancelButton : true,
        confirmButtonColor : "#DD6B55",
        confirmButtonText : lang.lang_3,
        cancelButtonText : lang.lang_4
      }).then(function() {
        if ("thumb" == yes) {
          $(".imagepr_wrap").html("");
          $(".previewshow").hide();
          $(".preview-placeholder").show();
          $("#upwthumb").val("");
        } else {
          /** @type {string} */
          var el = ".entry";
          if ("answer" == yes) {
            /** @type {string} */
            el = ".answer";
          }
          ele.parents(el).find(".imagearea_img").first().html("");
          ele.parents(el).find(".cd-input-image").first().val("");
          ele.parents(el).find(".mediaupload").first().show();
          ele.parents(el).find(".imagearea").first().addClass("hide");
        }
      });
    });
    $(".thumbactions a.makepreview").on("click", function() {
      var udataCur = $(this).parents(".entry").find('[data-type="image"]').val();
      $(".imagepr_wrap").html("");
      $(".previewshow").hide();
      $(".preview-placeholder").show();
      $("#upwthumb").val("");
      callback(udataCur);
    });
    $(".getimageurl").on("click", function(dataAndEvents) {
      var $this = $(this);
      var selector = $(this).attr("data-target");
      swal({
        title : lang.lang_5,
        input : "text",
        showCancelButton : true,
        animation : "slide-from-top",
        inputPlaceholder : lang.lang_6,
        confirmButtonText : "OK",
        cancelButtonText : lang.lang_4,
        /**
         * @param {string} val
         * @return {?}
         */
        preConfirm : function(val) {
          return new Promise(function(dataAndEvents, clone) {
            if (val === false) {
              false;
            } else {
              if ("" === val) {
                clone(lang.lang_7);
              } else {
                if (null == val.match(/\.(jpeg|jpg|gif|png)$/)) {
                  clone(lang.lang_8);
                } else {
                  if ("preview" == selector) {
                    callback(val);
                  } else {
                    success($this, val);
                  }
                  void swal({
                    title : "",
                    timer : 1
                  });
                }
              }
            }
          });
        }
      }, function(dataAndEvents) {
      });
    });
  };
  /**
   * @return {?}
   */
  var hide = function() {
    var themeType = $(".question-post-form").attr("data-type");
    if ("quiz" == themeType) {
      return $("#results .entry").each(function(startAt) {
        /** @type {number} */
        act = Math.ceil(startAt);
        /** @type {number} */
        num = act + 1;
        $(this).find(".order-number").text(num);
      }), $("#entries .entry").each(function(startAt) {
        /** @type {number} */
        acta = Math.ceil(startAt);
        /** @type {number} */
        numa = acta + 1;
        $(this).find(".order-number").text(numa);
      }), update(), runTest(), false;
    }
    if ("none" == $(".lists-types a.selected").attr("data-order") || 0 == $(".lists-types a.selected").length) {
      $(".ordering").addClass("noorder");
    } else {
      $(".ordering").removeClass("noorder");
    }
    runTest();
    var cnl = $(".entry").length;
    var order = $(".lists-types a.selected").attr("data-order");
    $(".entry").each(function(startAt) {
      /** @type {number} */
      act = Math.ceil(startAt);
      if ("desc" == order) {
        /** @type {number} */
        num = cnl - act;
      } else {
        /** @type {number} */
        num = act + 1;
      }
      $(this).find(".order-number").text(num);
    });
  };
  /**
   * @return {undefined}
   */
  var update = function() {
    var selector;
    var longNameA;
    var a;
    /** @type {Array} */
    var entries = [];
    /** @type {string} */
    var b = "";
    $(".question-post-form").attr("data-type");
    $("#results .entry").each(function(ix) {
      longNameA = $(this).attr("data-co");
      selector = $(this).find('[data-type="title"]').val();
      if (selector > "") {
        /** @type {string} */
        b = " - ";
      }
      a = ix + 1;
      entries[ix] = longNameA + "|" + a + b + selector.substr(0, 9);
    });
    $('[data-type="assign"]').each(function(dataAndEvents) {
      /** @type {string} */
      var optsData = "";
      var element = $(this).find(":checked").attr("data-co");
      var mat = $(this).attr("data-acst");
      $(entries).each(function(resultMat, pair) {
        var rangeElements = pair.split("|");
        /** @type {string} */
        optsData = resultMat == mat ? optsData + '<option selected="selected" data-co="' + rangeElements[0] + '" value="' + resultMat + '">Result: ' + rangeElements[1] + "</option>" : element == rangeElements[0] ? optsData + '<option selected="selected" data-co="' + rangeElements[0] + '" value="' + resultMat + '">Result: ' + rangeElements[1] + "</option>" : optsData + '<option data-co="' + rangeElements[0] + '" value="' + resultMat + '">Result: ' + rangeElements[1] + "</option>";
      });
      $(this).replaceWith('<select class="getassignres" data-type="assign"><option data-co="0" value="">Assign a result</option>' + optsData + "</select>");
    });
  };
  /**
   * @return {undefined}
   */
  var runTest = function() {
    $(".answers").each(function(dataAndEvents) {
      var element = $(this).attr("id");
      Sortable.create(document.getElementById(element), {
        group : ".answer",
        handle : ".drag-handle",
        animation : 150
      });
    });
  };
  /**
   * @param {string} value
   * @return {undefined}
   */
  var callback = function(value) {
    if ("" == $("#upwthumb").val()) {
      $(".imagepr_wrap").html('<img src="' + value + '" >');
      $(".previewshow").show();
      $(".preview-placeholder").hide();
      $("#upwthumb").val(value);
    }
  };
  /**
   * @param {Object} $this
   * @param {string} d
   * @return {undefined}
   */
  var success = function($this, d) {
    var selector = $this.attr("data-target");
    $this.parents("." + selector).find(".imagearea_img").first().html('<img src="' + d + '" >');
    $this.parents("." + selector).find(".cd-input-image").first().val(d);
    $this.parents(".inpunting").hide();
    $this.parents("." + selector).find(".imagearea").first().removeClass("hide");
    var charset = $this.parents("." + selector).data("type");
    if (charset == "ticket") {
      console.log("heheheeh" + charset);
      bindEvents();
    }
  };
  /**
   * @return {undefined}
   */
  var show = function() {
    $(".uploadaimage").off("click").on("change", function() {
      NProgress.inc();
      App.initLoadingCaption("show");
      var $this = $(this);
      $this.attr("name", "file").parents("form").attr("method", "POST").attr("enctype", "multipart/form-data");
      var e = $("input[name='_token']").val();
      $this.parents("form").append('<input name="_token" type="hidden" value="' + e + '">');
      var appFrontendUrl = "/upload-a-image?type=" + $this.attr("data-target");
      $this.parents("form").ajaxSubmit({
        url : appFrontendUrl,
        dataType : "json",
        /**
         * @param {Object} result
         * @return {undefined}
         */
        success : function(result) {
          if (result.errors) {
            swal({
              title : result.status,
              text : result.errors,
              type : "error",
              confirmButtonText : lang.lang_3,
              cancelButtonText : lang.lang_4
            });
          } else {
            if ($this.hasClass("preview")) {
              callback(result.path);
            } else {
              success($this, result.path);
              callback(result.path);
            }
          }
          App.initLoadingCaption("hide");
          NProgress.done(true);
        }
      });
    });
  };
  /**
   * @return {undefined}
   */
  var input = function() {
    $(".createvideo").on("click", function() {
      var util;
      var xs;
      var udataCur;
      var segment = $(this).parent("div").find("input").val();
      var codeSegments = segment.match(/^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?(?:youtu\.be|youtube\.com)\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user)\/)([^\?&\"'>]+)/);
      var r = segment.match(/^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?vimeo\.com\/([0-9]+)$/);
      var s = segment.match(/^.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/);
      var l = segment.match(/https?\:\/\/(?:www\.)?facebook\.com\/(\d+|[A-Za-z0-9\.]+)\/?/);
      if (codeSegments && 11 == codeSegments[1].length) {
        /** @type {string} */
        util = '<iframe src="//www.youtube.com/embed/' + codeSegments[1] + '" width="100%" height="400" frameborder="0" allowfullscreen></iframe>';
        /** @type {string} */
        udataCur = "http://img.youtube.com/vi/" + codeSegments[1] + "/hqdefault.jpg";
        callback(udataCur);
        /** @type {string} */
        xs = util;
      } else {
        if (r) {
          /** @type {string} */
          util = '<iframe src="//player.vimeo.com/video/' + r[1] + '" width="100%" height="400" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
          /** @type {string} */
          xs = util;
        } else {
          if (s) {
            /** @type {string} */
            util = '<iframe src="//www.dailymotion.com/embed/video/' + s[2] + '" width="100%" height="400" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
            /** @type {string} */
            xs = util;
          } else {
            if (!l) {
              return swal({
                title : lang.lang_11,
                text : lang.lang_9,
                type : "warning",
                timer : 2E3,
                showConfirmButton : false
              }), false;
            }
            /** @type {string} */
            var video_ = "video-" + (new Date).getTime();
            /** @type {string} */
            util = '<div id="' + video_ + '" class="fb-video" data-href="' + segment + '" style="max-height: 360px;"><div class="fb-xfbml-parse-ignore"></div></div><script>(typeof FB != "undefined") && FB.XFBML.parse($("#' + video_ + '").parent()[0]);\x3c/script>';
            /** @type {string} */
            udataCur = "https://graph.facebook.com/" + l[1] + "/picture?type=large";
            callback(udataCur);
            xs = segment;
          }
        }
      }
      fn($(this), util, xs);
    });
  };
  /**
   * @param {?} field
   * @param {string} name
   * @param {?} s
   * @return {undefined}
   */
  var fn = function(field, name, s) {
    field.parents(".inpunting").hide();
    field.parents(".entry").find(".embedarea").removeClass("hide");
    field.parents(".entry").find(".videoembed").html(name);
    field.parents(".entry").find(".cd-input-video").val(s);
  };
  /**
   * @param {string} t
   * @param {?} item
   * @param {?} resp
   * @param {string} key
   * @return {?}
   */
  var done = function(t, item, resp, key) {
    return "" == key ? (swal({
      title : lang.lang_11,
      text : lang.lang_9,
      type : "warning",
      timer : 2E3,
      showConfirmButton : false
    }), false) : (resp.fail(function(jqXHR, dataAndEvents) {
      return jqXHR.status && (404 == jqXHR.status && swal({
        title : lang.lang_11,
        text : lang.lang_9,
        type : "warning",
        timer : 2E3,
        showConfirmButton : false
      })), false;
    }), void resp.done(function(test) {
      if (test) {
        var index;
        var conf;
        var result = test.html;
        if ("tweet" == t) {
          var format = result.replace('<script async src="//platform.twitter.com/widgets.js" charset="utf-8">\x3c/script>', "");
          conf = result;
          index = format;
        } else {
          if ("instagram" == t) {
            /** @type {number} */
            var l = Math.floor(1E3 * Math.random() + 1);
            /** @type {string} */
            conf = '<iframe class="instagram-media instagram-media-rendered" id="instagram-embed-' + l + '" src="' + key + 'embed/captioned/?v=5" allowtransparency="true" frameborder="0" data-instgrm-payload-id="instagram-media-payload-0" scrolling="no" style="border: 0; margin: 1px; max-width: 658px; width: calc(100% - 2px); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.498039) 0px 0px 1px 0px, rgba(0, 0, 0, 0.14902) 0px 1px 10px 0px; display: block; padding: 0px; background: rgb(255, 255, 255);"></iframe>';
            /** @type {string} */
            index = key;
          } else {
            if ("soundcloud" == t) {
              item.parents(".entry").find(".ordering input").val(test.title);
              conf = result;
              index = result;
            }
          }
        }
        fn(item, conf, index);
      } else {
        swal({
          title : lang.lang_11,
          text : lang.lang_9,
          type : "warning",
          timer : 2E3,
          showConfirmButton : false
        });
      }
    }));
  };
  /**
   * @return {undefined}
   */
  var run = function() {
    $(".createtweet").off("click").on("click", function() {
      var el = $(this);
      var camelKey = el.parent("div").find("input").val();
      var lastValue = $.ajax({
        cache : false,
        url : "https://api.twitter.com/1/statuses/oembed.json?url=" + camelKey,
        method : "GET",
        dataType : "jsonp"
      });
      done("tweet", el, lastValue, camelKey);
    });
  };
  /**
   * @return {undefined}
   */
  var initialize = function() {
    $(".createfacebookpost").off("click").on("click", function() {
      var item = $(this);
      var c = item.parent("div").find("input").val();
      if ("" == c) {
        return swal(lang.lang_11, lang.lang_9, "warning"), false;
      }
      /** @type {string} */
      var util = '<div class="fb-post" data-href="' + c + '" data-width="100%"></div>';
      fn(item, util, c);
      FB.XFBML.parse();
    });
  };
  /**
   * @return {undefined}
   */
  var render = function() {
    $(".createinstagram").off("click").on("click", function() {
      var el = $(this);
      var camelKey = el.parent("div").find("input").val();
      var lastValue = $.ajax({
        cache : false,
        url : "http://api.instagram.com/publicapi/oembed/?url=" + camelKey,
        method : "GET",
        dataType : "jsonp"
      });
      done("instagram", el, lastValue, camelKey);
    });
  };
  /**
   * @return {undefined}
   */
  var createDateTimePicker = function() {
    $(".createsoundcloud").off("click").on("click", function() {
      var el = $(this);
      var camelKey = el.parent("div").find("input").val();
      var lastValue = $.ajax({
        url : "http://soundcloud.com/oembed?format=json&url=" + camelKey,
        method : "GET"
      });
      done("soundcloud", el, lastValue, camelKey);
    });
  };
  /**
   * @return {undefined}
   */
  var sliderFunction = function() {
    /** @type {string} */
    Simditor.locale = "en_EN";
    $(".message").each(function(dataAndEvents, mediaElem) {
      if (0 == $(this).parents(".entry").find(".simditor").length) {
        new Simditor({
          textarea : $(mediaElem),
          upload : false,
          tabIndent : false,
          toolbar : ["bold", "italic", "underline", "strikethrough", "|", "ul", "blockquote", "link"],
          toolbarFloat : false,
          toolbarFloatOffset : 35
        });
      }
    });
  };
  /**
   * @return {undefined}
   */
  var start = function() {
    $(".zip-file").each(function(dataAndEvents, deepDataAndEvents) {
      var $this = $(this);
      var item = $this.attr("data-preview");
      name = $this.attr("data-name");
      durl = $this.attr("data-durl");
      var copy = {
        initialPreview : [item],
        initialPreviewAsData : true,
        maxFileSize : 2E4,
        initialCaption : name,
        initialPreviewConfig : [{
          type : "other",
          size : 1024,
          filetype : "zip",
          caption : name,
          url : durl,
          key : 14
        }]
      };
      var props = {
        showUploadedThumbs : false,
        overwriteInitial : true,
        autoReplace : true,
        uploadUrl : "/upload-a-file",
        uploadExtraData : {
          type : $this.attr("data-target"),
          _token : $("input[name='_token']").val()
        },
        maxFileCount : 1,
        browseClass : "btn btn-success",
        browseLabel : "Pick File",
        browseIcon : '<i class="glyphicon glyphicon-picture"></i> ',
        removeClass : "btn btn-danger",
        removeLabel : "Delete",
        removeIcon : '<i class="glyphicon glyphicon-trash"></i> ',
        uploadClass : "btn btn-info",
        uploadLabel : "Upload",
        uploadIcon : '<i class="glyphicon glyphicon-upload"></i> ',
        allowedFileExtensions : ["doc", "pdf", "docx", "zip", "txt"],
        dropZoneTitle : "Drag & drop a document file here &hellip;",
        previewFileIconSettings : {
          "docx" : '<i class="fa fa-file-word-o text-primary"></i>',
          "xlsx" : '<i class="fa fa-file-excel-o text-success"></i>',
          "pptx" : '<i class="fa fa-file-powerpoint-o text-danger"></i>',
          "pdf" : '<i class="fa fa-file-pdf-o text-danger"></i>',
          "zip" : '<i class="fa fa-file-archive-o text-muted"></i>'
        }
      };
      if (typeof item !== "undefined" && item != "") {
        $.extend(true, props, copy);
      }
      $this.fileinput(props).on("filebatchselected", function(dataAndEvents, deepDataAndEvents) {
        $this.fileinput("upload");
      });
      $this.fileinput(props).on("fileuploaded", function(dataAndEvents, operation, deepDataAndEvents, ignoreMethodDoesntExist) {
        var rule = $(this).closest(".entry");
        var response = operation.response;
        rule.find('[data-type="fname"]').first().val(response.filename);
        rule.find('[data-type="furl"]').first().val(response.file);
        console.log(rule.find('[data-type="furl"]').first().val());
      });
    });
  };
  /**
   * @return {undefined}
   */
  var compile = function() {
    $(".audio-file").each(function(dataAndEvents, deepDataAndEvents) {
      var $this = $(this);
      var substring = $this.attr("data-preview");
      var name = $this.attr("data-name");
      var durl = $this.attr("data-durl");
      var copy = {
        initialPreview : [substring],
        initialPreviewAsData : true,
        maxFileSize : 2E4,
        initialCaption : name,
        initialPreviewConfig : [{
          type : "audio",
          size : 1024,
          filetype : "audio/mp3",
          caption : name,
          url : durl,
          key : 14
        }]
      };
      var props = {
        showUploadedThumbs : false,
        overwriteInitial : true,
        autoReplace : true,
        uploadUrl : "/upload-a-file",
        uploadExtraData : {
          type : $this.attr("data-target"),
          _token : $("input[name='_token']").val()
        },
        maxFileCount : 1,
        previewFileType : "audio",
        browseClass : "btn btn-success",
        browseLabel : "Pick File",
        browseIcon : '<i class="glyphicon glyphicon-picture"></i> ',
        removeClass : "btn btn-danger",
        removeLabel : "Delete",
        removeIcon : '<i class="glyphicon glyphicon-trash"></i> ',
        uploadClass : "btn btn-info",
        uploadLabel : "Upload",
        uploadIcon : '<i class="glyphicon glyphicon-upload"></i> ',
        allowedFileExtensions : ["mp3", "wav"],
        dropZoneTitle : "Drag & drop MP3 or WAV files here &hellip;"
      };
      if (substring != "") {
        $.extend(true, props, copy);
      }
      $this.fileinput(props).on("filebatchselected", function(dataAndEvents, deepDataAndEvents) {
        $this.fileinput("upload");
      });
      $this.fileinput(props).on("fileuploaded", function(dataAndEvents, operation, deepDataAndEvents, ignoreMethodDoesntExist) {
        var rule = $(this).closest(".entry");
        var response = operation.response;
        rule.find('[data-type="fname"]').first().val(response.filename);
        rule.find('[data-type="furl"]').first().val(response.file);
        console.log(rule.find('[data-type="furl"]').first().val());
      });
    });
  };
  /**
   * @return {undefined}
   */
  var test = function() {
    $(".PostAction").off("click").on("click", function() {
      NProgress.inc();
      App.initLoadingCaption("show");
      /** @type {Array} */
      var groups = [];
      if (0 == $(".entry").length) {
        return swal(lang.lang_10), NProgress.done(true), App.initLoadingCaption("hide"), false;
      }
      $(".entry").each(function(i, sourceContainer) {
        var type = $(this).attr("data-type");
        if (null == typeof type || ("" == type || void 0 == type)) {
          /** @type {null} */
          type = null;
        }
        var value = $(this).find('[data-type="latitude"]').first().val();
        if (null == typeof value || ("" == value || void 0 == value)) {
          /** @type {null} */
          value = null;
        }
        var key = $(this).find('[data-type="longitude"]').first().val();
        if (null == typeof key || ("" == key || void 0 == key)) {
          /** @type {null} */
          key = null;
        }
        var id = $(this).find('[data-type="price"]').first().val();
        if (null == typeof id || ("" == id || void 0 == id)) {
          /** @type {null} */
          id = null;
        }
        var val = $(this).find('[data-type="title"]').first().val();
        if (null == typeof val || ("" == val || void 0 == val)) {
          /** @type {null} */
          val = null;
        }
        /** @type {number} */
        var locked = $(this).find('[data-type="locked"]').first().is(":checked") == true ? 1 : 0;
        if (null == typeof locked || ("" == locked || void 0 == locked)) {
          /** @type {number} */
          locked = 0;
        }
        var text = $(this).find('[data-type="body"]').first().val();
        if (null == typeof text || ("" == text || void 0 == text)) {
          /** @type {null} */
          text = null;
        }
        var scalar = $(this).find('[data-type="image"]').first().val();
        if (null == typeof scalar || ("" == scalar || void 0 == scalar)) {
          /** @type {null} */
          scalar = null;
        }
        var video = $(this).find('[data-type="video"]').first().val();
        if (null == typeof video || ("" == video || void 0 == video)) {
          /** @type {null} */
          video = null;
        }
        var fname = $(this).find('[data-type="fname"]').first().val();
        if (null == typeof fname || ("" == fname || void 0 == fname)) {
          /** @type {null} */
          fname = null;
        }
        var zeroQuoted = $(this).find('[data-type="furl"]').first().val();
        if (null == typeof zeroQuoted || ("" == zeroQuoted || void 0 == zeroQuoted)) {
          /** @type {null} */
          zeroQuoted = null;
        }
        var message = $(this).find('[data-type="source"]').first().val();
        if ((null == typeof message || ("" == message || void 0 == message)) && (message = null), "quizquestion" == type) {
          var c = $(this).find('[data-curtype="on"]').first().attr("data-query");
          if (null == typeof c || ("" == c || void 0 == c)) {
            /** @type {null} */
            c = null;
          }
          groups[i] = {
            type : type,
            title : val,
            body : text,
            source : message,
            locked : locked,
            image : scalar,
            listtype : c
          };
          /** @type {Array} */
          groups[i].answers = [];
          $(sourceContainer).find(".answer").each(function(idx, dataAndEvents) {
            var c = $(this).attr("data-type");
            if (null == typeof c || ("" == c || void 0 == c)) {
              /** @type {null} */
              c = null;
            }
            var val = $(this).find('[data-type="title"]').first().val();
            if (null == typeof val || ("" == val || void 0 == val)) {
              /** @type {null} */
              val = null;
            }
            var key = $(this).find('[data-type="image"]').first().val();
            if (null == typeof key || ("" == key || void 0 == key)) {
              /** @type {null} */
              key = null;
            }
            var scalar = $(this).find('[data-type="assign"]').first().val();
            if (null == typeof scalar || ("" == scalar || void 0 == scalar)) {
              /** @type {null} */
              scalar = null;
            }
            groups[i].answers[idx] = {
              type : c,
              title : val,
              image : key,
              assign : scalar
            };
          });
        } else {
          if ("poll" == type) {
            c = $(this).find('[data-curtype="on"]').first().attr("data-query");
            if (null == typeof c || ("" == c || void 0 == c)) {
              /** @type {null} */
              c = null;
            }
            groups[i] = {
              type : type,
              title : val,
              body : text,
              locked : locked,
              source : message,
              image : scalar,
              listtype : c
            };
            /** @type {Array} */
            groups[i].answers = [];
            $(sourceContainer).find(".answer").each(function(idx, dataAndEvents) {
              var c = $(this).attr("data-type");
              if (null == typeof c || ("" == c || void 0 == c)) {
                /** @type {null} */
                c = null;
              }
              var val = $(this).find('[data-type="title"]').first().val();
              if (null == typeof val || ("" == val || void 0 == val)) {
                /** @type {null} */
                val = null;
              }
              var scalar = $(this).find('[data-type="image"]').first().val();
              if (null == typeof scalar || ("" == scalar || void 0 == scalar)) {
                /** @type {null} */
                scalar = null;
              }
              groups[i].answers[idx] = {
                type : c,
                title : val,
                image : scalar,
                assign : "1"
              };
            });
          } else {
            if ("ticket" == type) {
              var op = $(this).find('[data-type="discount"]').first().val();
              if (null == typeof op || ("" == op || void 0 == op)) {
                /** @type {null} */
                op = null;
              }
              groups[i] = {
                type : type,
                title : val,
                body : text,
                image : scalar,
                "price" : id,
                "discount" : op,
                "count" : value
              };
              /** @type {Array} */
              groups[i].elements = [];
              $(sourceContainer).find(".dragger").each(function(holeId, dataAndEvents) {
                var value = $(this).css("left");
                if (null == typeof value || ("" == value || void 0 == value)) {
                  /** @type {null} */
                  value = null;
                }
                var c = $(this).css("top");
                if (null == typeof c || ("" == c || void 0 == c)) {
                  /** @type {null} */
                  c = null;
                }
                var key = $(this).attr("data-name");
                if (null == typeof key || ("" == key || void 0 == key)) {
                  /** @type {null} */
                  key = null;
                }
                var id = $(this).css("font-size");
                if (null == typeof id || ("" == id || void 0 == id)) {
                  /** @type {null} */
                  id = null;
                }
                var scalar = $(this).height();
                if (null == typeof scalar || ("" == scalar || void 0 == scalar)) {
                  /** @type {null} */
                  scalar = null;
                }
                var val = $(this).width();
                if (null == typeof val || ("" == val || void 0 == val)) {
                  /** @type {null} */
                  val = null;
                }
                groups[i].elements[holeId] = {
                  type : key,
                  top : c,
                  left : value,
                  width : val,
                  height : scalar,
                  font_size : id
                };
              });
            } else {
              if ("text" == type) {
                groups[i] = {
                  type : type,
                  title : val,
                  locked : locked,
                  body : text,
                  source : message
                };
              } else {
                if ("image" == type) {
                  groups[i] = {
                    type : type,
                    title : val,
                    body : text,
                    source : message,
                    locked : locked,
                    image : scalar
                  };
                } else {
                  if ("audio" == type) {
                    groups[i] = {
                      type : type,
                      title : val,
                      body : text,
                      source : message,
                      locked : locked,
                      filename : fname,
                      fileurl : zeroQuoted
                    };
                  } else {
                    if ("zipfile" == type) {
                      groups[i] = {
                        type : type,
                        title : val,
                        body : text,
                        source : message,
                        locked : locked,
                        filename : fname,
                        fileurl : zeroQuoted
                      };
                    } else {
                      if ("venue" == type) {
                        groups[i] = {
                          type : type,
                          title : val,
                          "fname" : fname,
                          "latitude" : value,
                          "longitude" : key
                        };
                      } else {
                        if ("coupon" == type) {
                          groups[i] = {
                            type : type,
                            title : val,
                            "count" : value,
                            source : message,
                            body : text,
                            image : scalar,
                            video : video
                          };
                        } else {
                          if ("video" == type) {
                            groups[i] = {
                              type : type,
                              title : val,
                              body : text,
                              source : message,
                              locked : locked,
                              video : video
                            };
                          } else {
                            if ("embed" == type || ("tweet" == type || ("facebookpost" == type || ("instagram" == type || "soundcloud" == type)))) {
                              groups[i] = {
                                type : type,
                                title : val,
                                body : text,
                                source : message,
                                locked : locked,
                                video : video
                              };
                            } else {
                              groups[i] = {
                                type : type,
                                title : val,
                                body : text,
                                locked : locked,
                                image : scalar,
                                source : message
                              };
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      });
      var elem = $(this).closest("form");
      var datapostt = $(this).attr("data-post-t");
      var type = elem.find(".question-post-form").attr("data-type");
      var action = elem.attr("action");
      var token = elem.find("input[name=_token]").val();
      var MSG_CLOSURE_CUSTOM_COLOR_BUTTON = elem.find("input[name=headline]").val();
      var groupDescription = elem.find("textarea[name=description]").val();
      var tags = elem.find("#tags").val();
      var category = elem.find("select[name=category]").val();
      var minIdx = elem.find("input[name=start]").val();
      var authorizationUrl = elem.find("select[name=location]").val();
      var cDigit = elem.find("select[name=pagination]").val();
      var thumb = elem.find("input[name=thumb]").val();
      var price = elem.find("input[name=price]").val();
      var c = elem.find(".lists-types a.selected").attr("data-order");
      return(null == typeof c || ("" == c || void 0 == c)) && (c = null), $(".lists-types").length > 0 && 0 == $(".lists-types a.selected").length ? (swal("Cooise list type"), NProgress.done(true), App.initLoadingCaption("hide"), false) : $(".entry").length < parseInt(cDigit) && 0 != cDigit ? (swal(lang.lang_12), NProgress.done(true), App.initLoadingCaption("hide"), false) : void $.post(action, {
        datapostt : datapostt,
        title : MSG_CLOSURE_CUSTOM_COLOR_BUTTON,
        description : groupDescription,
        tags : tags,
        category : category,
        start : minIdx,
        location : authorizationUrl,
        pagination : cDigit,
        type : type,
        price : price,
        ordertype : c,
        thumb : thumb,
        _token : token,
        entrys : groups
      }, function(data) {
        if (data.errors) {
          App.initLoadingCaption("hide");
          NProgress.done(true);
          swal({
            title : data.status,
            text : data.errors,
            type : "error",
            timer : 3E3,
            showConfirmButton : false
          });
        } else {
          setTimeout(function() {
            App.initLoadingCaption("hide");
            NProgress.done(true);
            location.href = data.url;
          }, 1500);
        }
      }, "json");
    });
  };
  /**
   * @param {(Element|string)} latitude
   * @param {Object} longitude
   * @return {undefined}
   */
  var init = function(latitude, longitude) {
    $(".geo-location").click(function(dataAndEvents) {
      if (navigator.geolocation) {
        $("#submit-map").addClass("fade-map");
        navigator.geolocation.getCurrentPosition(BuzzyEditor.myLocation);
      } else {
        error("Geo Location is not supported");
      }
    });
    $(".venue").slice(1).remove();
    latitude = $("#venue").data("latitude");
    longitude = $("#venue").data("longitude");
    var latlng = new google.maps.LatLng(latitude, longitude);
    var opts = {
      zoom : 15,
      center : latlng,
      disableDefaultUI : false,
      styles : mapStyles
    };
    /** @type {(HTMLElement|null)} */
    var mapDiv = document.getElementById("submit-map");
    var map = new google.maps.Map(mapDiv, opts);
    var marker = new MarkerWithLabel({
      position : latlng,
      map : map,
      icon : "/assets/img/marker.png",
      labelAnchor : new google.maps.Point(50, 0),
      draggable : true
    });
    $("#submit-map").removeClass("fade-map");
    google.maps.event.addListener(marker, "mouseup", function(dataAndEvents) {
      var latitude = this.position.lat();
      var longitude = this.position.lng();
      $('[data-type="latitude"]').val(this.position.lat());
      $('[data-type="longitude"]').val(this.position.lng());
    });
    /** @type {(HTMLElement|null)} */
    var input = document.getElementById("address-map");
    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo("bounds", map);
    google.maps.event.addListener(autocomplete, "place_changed", function() {
      var result = autocomplete.getPlace();
      if (!result.geometry) {
        return;
      }
      if (result.geometry.viewport) {
        map.fitBounds(result.geometry.viewport);
      } else {
        map.setCenter(result.geometry.location);
        map.setZoom(17);
      }
      marker.setPosition(result.geometry.location);
      marker.setVisible(true);
      $('[data-type="latitude"]').val(marker.getPosition().lat());
      $('[data-type="longitude"]').val(marker.getPosition().lng());
      /** @type {string} */
      var optsData = "";
      if (result.address_components) {
        /** @type {string} */
        optsData = [result.address_components[0] && result.address_components[0].short_name || "", result.address_components[1] && result.address_components[1].short_name || "", result.address_components[2] && result.address_components[2].short_name || ""].join(" ");
      }
    });
  };
  /**
   * @return {undefined}
   */
  var previous = function() {
    show();
  };
  /**
   * @return {undefined}
   */
  var bindEvents = function() {
    $(".tickets-entry").each(function(dataAndEvents, sourceContainer) {
      $(sourceContainer).find(".edit-fontsize").on("keyup change", function(dataAndEvents) {
        var nEditing = $(this).data("nEditing");
        var maxHeight = $(this).val();
        $(sourceContainer).find('[data-name="' + nEditing + '"]').css("font-size", maxHeight + "px").data("font-size", maxHeight);
      });
      $(sourceContainer).find(".vtemplateInfo").children(".dragger").each(function(dataAndEvents, elem) {
        if ($(elem).hasClass("ui-draggable")) {
          $(elem).draggable("destroy").resizable("destroy");
        }
        $(elem).off().mouseenter(function(dataAndEvents) {
          $(elem).css({
            "border" : "green 3px dashed",
            "background-color" : "#E6E6E6"
          });
        }).mouseleave(function(dataAndEvents) {
          $(elem).css({
            "border" : "red 3px dashed",
            "background-color" : "#FFFFFF"
          });
        }).css({
          "border" : "red 3px dashed",
          "background-color" : "#FFFFFF",
          "cursor" : "move",
          "z-index" : 999
        }).resizable({
          /**
           * @param {?} gotoEnd
           * @param {?} ui
           * @return {undefined}
           */
          stop : function(gotoEnd, ui) {
            $(elem).data("height", ui.size.height);
            $(elem).data("width", ui.size.width);
          }
        }).draggable({
          appendTo : $(sourceContainer),
          /**
           * @param {?} gotoEnd
           * @param {Object} ui
           * @return {undefined}
           */
          stop : function(gotoEnd, ui) {
            $(elem).data("top", ui.position.top);
            $(elem).data("left", ui.position.left);
          }
        });
        if ($(elem).hasClass("txt")) {
          $(elem).click(function(dataAndEvents) {
            $(sourceContainer).find(".edit-fontsize").val($(elem).data("fontsize")).css({
              "display" : "inline"
            }).data("nEditing", $(elem).data("name"));
            $(sourceContainer).find(".size").html("Edit " + $(elem).data("name") + " Fontsize").show();
          });
        } else {
          $(elem).click(function(dataAndEvents) {
            $(sourceContainer).find(".edit-fontsize").hide();
            $(sourceContainer).find(".size").hide();
          });
        }
      });
    });
  };
  /**
   * @param {?} el
   * @return {undefined}
   */
  var destroy = function(el) {
    $(el).parents(".tickets-entry").find(".vtemplateInfo").children(".dragger").each(function(dataAndEvents, element) {
      $(element).draggable("destroy");
    });
  };
  return{
    /**
     * @return {undefined}
     */
    init : function() {
      NProgress.set(0.4);
      valueAccessor();
      test();
      this.initAjax();
      NProgress.done(true);
    },
    /**
     * @return {undefined}
     */
    initAjax : function() {
      input();
      show();
      compile();
      start();
      bindEvents();
    },
    /**
     * @return {undefined}
     */
    EditorInit : function() {
      sliderFunction();
      postLink();
      hide();
    },
    /**
     * @return {undefined}
     */
    initImageUpluad : function() {
      show();
    },
    /**
     * @return {undefined}
     */
    initVideoGet : function() {
      input();
    },
    /**
     * @return {undefined}
     */
    initTweetGet : function() {
      run();
    },
    /**
     * @return {undefined}
     */
    initFacebookPostGet : function() {
      initialize();
    },
    /**
     * @return {undefined}
     */
    initInstagramGet : function() {
      render();
    },
    /**
     * @return {undefined}
     */
    initSoundCloudGet : function() {
      createDateTimePicker();
    },
    /**
     * @return {undefined}
     */
    initAssignSelect : function() {
      update();
    },
    /**
     * @return {undefined}
     */
    initAudioGet : function() {
      compile();
    },
    /**
     * @return {undefined}
     */
    initFilesGet : function() {
      start();
    },
    /**
     * @return {undefined}
     */
    initVenue : function() {
      init();
    },
    /**
     * @param {HTMLElement} position
     * @return {undefined}
     */
    myLocation : function(position) {
      $("#venue").data("latitude", position.coords.latitude);
      $("#venue").data("longitude", position.coords.longitude);
      $('[data-type="latitude"]').val(position.coords.latitude);
      $('[data-type="longitude"]').val(position.coords.longitude);
    },
    /**
     * @return {undefined}
     */
    initTickets : function() {
      bindEvents();
    },
    /**
     * @return {undefined}
     */
    initCoupons : function() {
      previous();
    }
  };
}();
